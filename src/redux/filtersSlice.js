import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'
import { fetchCategories, fetchProducts } from './productsAPI'

const initialState = {
  filters: {
    categories: [],
    price: {
      min: null,
      max: null,
    }
  }
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
// export const incrementAsync = createAsyncThunk(
//   'counter/fetchCount',
//   async (amount) => {
//     const response = await fetchCount(amount);
//     // The value we return becomes the `fulfilled` action payload
//     return response.data;
//   }
// );

export const getProducts = createAsyncThunk(
  'products/fetchProducts',
  async () => {
    const response = await fetchProducts()
    return response.data
  }
)

// export const getCategories = createAsyncThunk(
//   'products/fetchCategories',
//   async () => {
//     const response = await fetchCategories()
//     return response.data
//   }
// )

export const filtersSlice = createSlice({
  name: 'products',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.value += 1;
    },
    decrement: (state) => {
      state.value -= 1;
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action) => {
      state.value += action.payload;
    },
    addCategory: (state, action) => {
      // state.filters.categories = [...state.categories, action.payload]
      state.filters.categories.push(action.payload)
    },
    removeCategory: (state, action) => {
      state.filters.categories = state.filters.categories.filter(function(item) {
        return item !== action.payload
      })
    },
    toggleCategory: (state, action) => {
      const categories = state.filters.categories

      // if (categories.includes(action.payload)) {
      //   state.filters.categories = categories.filter(i => i !== action.payload)
      // } else {
      //   categories.push(action.payload)
      // }

      state.filters.categories = categories.includes(action.payload) ? categories.filter(i => i !== action.payload) : [...categories, action.payload]
    },
    // setPrices: (state, action) => {
    //   state.filters.price = action.payload
    // }
    setPriceMin: (state, action) => {
      state.filters.price.min = action.payload
    },
    setPriceMax: (state, action) => {
      state.filters.price.max = action.payload
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    // builder
      // .addCase(getCategories.pending, (state) => {
      //   state.status = 'loading'
      // })
      // .addCase(getCategories.fulfilled, (state, action) => {
      //   state.status = 'idle'
      //   state.categories = action.payload
      // })
      // .addCase(getCategories.rejected, (state, action) => {
      //   state.status = 'error'
      //   state.error = 'an error occured'
      // })
  },
});

export const { increment, decrement, incrementByAmount, addCategory, removeCategory, toggleCategory, setPriceMin, setPriceMax } = filtersSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCount = (state) => state.counter.value;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const incrementIfOdd = (amount) => (dispatch, getState) => {
  const currentValue = selectCount(getState());
  if (currentValue % 2 === 1) {
    dispatch(incrementByAmount(amount));
  }
};

export default filtersSlice.reducer;
