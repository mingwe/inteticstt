import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'
import { fetchCategories, fetchProducts } from './productsAPI'
import { ASC, DESC, POPULAR } from '../helpers/sort';
import { STATUS_ERROR, STATUS_IDLE, STATUS_LOADING } from '../helpers/status';

const initialState = {
  value: 0,
  status: 'idle',
  error: '',
  products: [],
  categories: [],
  filters: {
    categories: [],
    price: {
      min: null,
      max: null,
    }
  },
  productsFiltered: [],
  sort: null,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
// export const incrementAsync = createAsyncThunk(
//   'counter/fetchCount',
//   async (amount) => {
//     const response = await fetchCount(amount);
//     // The value we return becomes the `fulfilled` action payload
//     return response.data;
//   }
// );

export const getProducts = createAsyncThunk(
  'products/fetchProducts',
  async () => {
    const response = await fetchProducts()
    return response.data
  }
)

export const getCategories = createAsyncThunk(
  'products/fetchCategories',
  async () => {
    const response = await fetchCategories()
    return response.data
  }
)

export const productsSlice = createSlice({
  name: 'products',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // addCategory: (state, action) => {
    //   // state.filters.categories = [...state.categories, action.payload]
    //   state.filters.categories.push(action.payload)
    // },
    // removeCategory: (state, action) => {
    //   state.filters.categories = state.filters.categories.filter(function(item) {
    //     return item !== action.payload
    //   })
    // },
    toggleCategory: (state, action) => {
      const categories = state.filters.categories
      state.filters.categories = categories.includes(action.payload) ? categories.filter(i => i !== action.payload) : [...categories, action.payload]
    },
    setPriceMin: (state, action) => {
      state.filters.price.min = action.payload
    },
    setPriceMax: (state, action) => {
      state.filters.price.max = action.payload
    },
    applyFilters: (state) => {
      const categories = state.filters.categories
      const priceMin = state.filters.price.min ?? -Infinity
      const priceMax = state.filters.price.max ?? +Infinity
      const filteredByCategories = state.products.filter(i => !categories.length || categories.includes(i.category))
      const filteredByPrice = filteredByCategories.filter(i => i.price >= priceMin && i.price <= priceMax)
      state.productsFiltered = filteredByPrice
    },
    setSort: (state, action) => {
      if (action.payload !== state.sort) {
        state.sort = action.payload
        switch (action.payload) {
          case ASC:
            state.products.sort((a, b) => (a.price > b.price ? 1 : -1))
            break
          case DESC:
            state.products.sort((a, b) => (a.price < b.price ? 1 : -1))
            break
          case POPULAR:
            state.products.sort((a, b) => (a.rating.rate > b.rating.rate ? 1 : -1))
            break
          default:
            break
        }
      }
      // state.products
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      // .addCase(incrementAsync.pending, (state) => {
      //   state.status = 'loading';
      // })
      // .addCase(incrementAsync.fulfilled, (state, action) => {
      //   state.status = 'idle';
      //   state.value += action.payload;
      // })
      .addCase(getProducts.pending, (state) => {
          state.status = STATUS_LOADING
      })
      .addCase(getProducts.fulfilled, (state, action) => {
        state.status = STATUS_IDLE
        state.products = action.payload
      })
      .addCase(getProducts.rejected, (state, action) => {
        state.status = STATUS_ERROR
        state.error = 'an error occured'
      })
      .addCase(getCategories.pending, (state) => {
        state.status = STATUS_LOADING
      })
      .addCase(getCategories.fulfilled, (state, action) => {
        state.status = STATUS_IDLE
        state.categories = action.payload
      })
      .addCase(getCategories.rejected, (state, action) => {
        state.status = STATUS_ERROR
        state.error = 'an error occured'
      })
  },
});

export const { incrementByAmount, toggleCategory, setPriceMin, setPriceMax, applyFilters, setSort } = productsSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCount = (state) => state.counter.value;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const incrementIfOdd = (amount) => (dispatch, getState) => {
  const currentValue = selectCount(getState());
  if (currentValue % 2 === 1) {
    dispatch(incrementByAmount(amount));
  }
};

export default productsSlice.reducer;
